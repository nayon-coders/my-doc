1. allOrderModel.value.data! (its a data model) 
2.   .fold(0.0, (sum, total) => sum + total!); (sum the value) 


 // Today's sales total
  double get todayTotalSales {
    final today = DateFormat('yyyy-MM-dd').format(DateTime.now());
    return allOrderModel.value.data!
        .where((order) => order.deliveryDate!.startsWith(today))
        .map((order) => order.total)
        .fold(0.0, (sum, total) => sum + total!);
  }

  // This week's sales total
  double get weekTotalSales {
    final now = DateTime.now();
    final weekStart = now.subtract(Duration(days: now.weekday - 1)); // Start of the week (Monday)
    final weekEnd = weekStart.add(Duration(days: 6)); // End of the week (Sunday)

    return allOrderModel.value.data!
        .where((order) {
      final orderDate = DateTime.parse(order!.deliveryDate!);
      return orderDate.isAfter(weekStart.subtract(const Duration(seconds: 1))) &&
          orderDate.isBefore(weekEnd.add(const Duration(seconds: 1)));
    })
        .map((order) => order.total)
        .fold(0.0, (sum, total) => sum + total!);
  }

  // This month's sales total
  double get monthTotalSales {
    final now = DateTime.now();
    final firstDayOfMonth = DateTime(now.year, now.month, 1);
    final lastDayOfMonth = DateTime(now.year, now.month + 1, 0);

    return allOrderModel.value.data!
        .where((order) {
      final orderDate = DateTime.parse(order.deliveryDate!);
      return orderDate.isAfter(firstDayOfMonth.subtract(const Duration(seconds: 1))) &&
          orderDate.isBefore(lastDayOfMonth.add(const Duration(seconds: 1)));
    })
        .map((order) => order.total)
        .fold(0.0, (sum, total) => sum + total!);
  }
